// import React from 'react'
// import LoginForm from './LoginForm'
// import LoginList from './LoginList'
// import API from '../LoginAPI'
// import PropTypes from 'prop-types'

// function ErrorMessage ({ message }) {
//   return <div className='errorMessage'>{message}</div>
// }

// ErrorMessage.propTypes = {
//   message: PropTypes.string.isRequired
// }

// export default function Login () {
//   const [loginList, setLoginList] = React.useState([])
//   const [loadingMessage, setLoadingMessage] = React.useState('Loading...')
//   const [errorMessage, setErrorMessage] = React.useState(null)

//   const [formMode, setFormMode] = React.useState('new')

//   const emptyLogin = {user: '', password: '' }
//   const [currentLogin, setCurrentLogin] = React.useState(emptyLogin)

//   // Note:  The {} around API.fetchLogins are important so that the block
//   // passed to useEffect returns undefined (instead of the promise generated by fetch).
//   React.useEffect(() => {
//     API.fetchLogins().then(data => {
//       setLoginList(data)
//       setLoadingMessage(null)
//     }).catch((message) => {
//       setLoadingMessage('Unable to load logins because ' + message)
//     })
//   }, [])

//   const updateLogin = (field, value) => {
//     const newLogin = { ...currentLogin }
//     newLogin[field] = value
//     setCurrentLogin(newLogin)
//   }

//   function userExists(username) {
//     return loginList.some(function(el) {
//       return el.username === username;
//     }); 
//   }

//   const formSubmitted = () => {
//     setLoginList([...loginList, currentLogin])
//     if (userExists) 
      
//     setErrorMessage(null)
//     if (formMode === 'new') {
//       API.postNewLogin(currentLogin).then(data => {
//         console.log('Received data')
//         console.log(data)
//         if (data.id) {
//           currentLogin.id = data.id
//           setLoginList([...loginList, currentLogin])
//         } else {
//           console.log("New login wasn't created.")
//         }
//       }).catch(message => setErrorMessage(`Failed to create new login: ${message}`))
//     } else {
//       API.updateLogin(currentLogin).then(() => {
//         const newLoginList = [...loginList]
//         const loginIndex = loginList.findIndex((login) => login.id === currentLogin.id)

//         newLoginList[loginIndex] = currentLogin
//         setLoginList(newLoginList)
//       }).catch(message => setErrorMessage(`Failed to update login: ${message}`))
//     }
//   }

//   const editClicked = (login) => {
//     setErrorMessage(null)
//     setFormMode('update')
//     setCurrentLogin(login)
//   }

//   const cancelClicked = () => {
//     setErrorMessage(null)
//     setFormMode('new')
//     setCurrentLogin(emptyLogin)
//   }

//   const deleteClicked = (id) => {
//     API.deleteLogin(id).then(() => {
//       setLoginList(loginList.filter((item) => item.id !== id))
//       cancelClicked()
//     }).catch(message => setErrorMessage(`Failed to delete login: ${message}`))
//   }

//   const errorBlock = errorMessage ? <ErrorMessage message={errorMessage} /> : null

//   return (
//     <div className="login">
//       {errorBlock}
//       <LoginForm formMode={formMode} login={currentLogin} updateLogin={updateLogin}
//         submitCallback={formSubmitted} cancelCallback={cancelClicked} />
//       <div />
//       {loadingMessage
//         ? <p>{loadingMessage}</p>
//         : <LoginList logins={loginList} onEditClicked={editClicked} onDeleteClicked={deleteClicked} />
//       }
//     </div>
//   )
// }
