import React from "react";
import {
  BrowserRouter as Router,
  Switch,
  Route,
  Link,
  Redirect,
  useHistory,
  useLocation
} from "react-router-dom";

import Customer from './Customer'
import Part from './Parts'
import WorkOrder from './WorkOrder'
import logo from '../images/godwinLogo.png'
// import Login from './Login'

import LoginForm from './LoginForm'
// import LoginList from './LoginList'
import API from '../LoginAPI'
import PropTypes from 'prop-types'

import Cookies from 'universal-cookie';

const cookies = new Cookies()

function ErrorMessage ({ message }) {
  return <div className='errorMessage'>{message}</div>
}

ErrorMessage.propTypes = {
  message: PropTypes.string.isRequired
}

export default function Routing() {
  return (
    <Router>
      <div className='godwin'>
        <img src={logo} alt="Logo" />
        <AuthButton />
        <ul>
          <li>
            <Link to="/">Home</Link>
          </li>
          <li>
            <Link to="/order">Customer Orders</Link>
          </li>
          <li>
            <Link to="/customer">Customer Page</Link>
          </li>
          <li>
            <Link to="/part">Part Page</Link>
          </li>
        </ul>

        <Switch>
          <Route exact path="/">
          <LoginPage />
          </Route>
          <Route path="/order">
            <WorkOrder />
          </Route>
          <PrivateRoute path="/customer">
            <Customer />
          </PrivateRoute>
          <PrivateRoute path="/part">
            <Part />
          </PrivateRoute>
        </Switch>
      </div>
    </Router>
  );
}

const fakeAuth = {
  isAuthenticated: false,
  authenticate(cb) {
    cookies.set('SinCityADameToKillFor', 'CoheedAndCambria', {path: '/'})
    console.log(cookies.get('CoheedAndCambria'))
    fakeAuth.isAuthenticated = true;
    setTimeout(cb, 100); // fake async
  },
  signout(cb) {
    fakeAuth.isAuthenticated = false;
    setTimeout(cb, 100);
  }
};

function AuthButton() {
  let history = useHistory();

  return fakeAuth.isAuthenticated ? (
    <p>
      <button onClick={() => { fakeAuth.signout(() => history.push("/")); }}>
        Sign out
      </button>
    </p>
  ) : (
      <p>You are not logged in.</p>
    );
}

// A wrapper for <Route> that redirects to the login
// screen if you're not yet authenticated.
function PrivateRoute({ children, ...rest }) {
  return (
    <Route
      {...rest}
      render={({ location }) =>
        fakeAuth.isAuthenticated ? (
          children
        ) : (
            <Redirect
              to={{
                pathname: "/",
                state: { from: location }
              }}
            />
          )
      }
    />
  );
}

function LoginPage() {
  let history = useHistory();
  let location = useLocation();

  let { from } = location.state || { from: { pathname: "/order" } };
  let login = () => {
    fakeAuth.authenticate(() => {
      history.replace(from);
    });
  };

  const [loginList, setLoginList] = React.useState([])
  const [loadingMessage, setLoadingMessage] = React.useState('Loading...')
  const [errorMessage, setErrorMessage] = React.useState(null)

  const [formMode, setFormMode] = React.useState('new')

  const emptyLogin = {user: '', password: '' }
  const [currentLogin, setCurrentLogin] = React.useState(emptyLogin)

  // Note:  The {} around API.fetchLogins are important so that the block
  // passed to useEffect returns undefined (instead of the promise generated by fetch).
  React.useEffect(() => {
    API.fetchLogins().then(data => {
      setLoginList(data)
      setLoadingMessage(null)
    }).catch((message) => {
      setLoadingMessage('Unable to load logins because ' + message)
    })
  }, [])

  const updateLogin = (field, value) => {
    const newLogin = { ...currentLogin }
    newLogin[field] = value
    setCurrentLogin(newLogin)
  }

  const formSubmitted = () => {
    setLoginList([...loginList, currentLogin])
    if (loginList.some(login => login.user === currentLogin.user)) loginUser()
    setErrorMessage(null)
    if (formMode === 'new') {
      API.postNewLogin(currentLogin).then(data => {
        console.log('Received data')
        console.log(data)
        if (data.id) {
          currentLogin.id = data.id
          setLoginList([...loginList, currentLogin])
        }
      }).catch(message => setErrorMessage(null))
    }
  }

  const cancelClicked = () => {
    setErrorMessage(null)
    setFormMode('new')
    setCurrentLogin(emptyLogin)
  }

  const loginUser = () => {
    fakeAuth.authenticate(() => {
      history.replace(from);
    });
  };

  const errorBlock = errorMessage ? <ErrorMessage message={errorMessage} /> : null

  return (
    <div className="login">
      {errorBlock}
      <LoginForm formMode={formMode} login={currentLogin} updateLogin={updateLogin}
        submitCallback={formSubmitted} cancelCallback={cancelClicked}/>
      <div />
      {/* {loadingMessage
        ? <p>{loadingMessage}</p>
        : <LoginList logins={loginList} onEditClicked={editClicked} onDeleteClicked={deleteClicked} />
      } */}
    </div>
  )
}
