import React from 'react'
import CustomerForm from './CustomerForm'
import CustomerList from './CustomerList'
import API from '../CustomerAPI'
import PropTypes from 'prop-types'

function ErrorMessage ({ message }) {
  return <div className='errorMessage'>{message}</div>
}

ErrorMessage.propTypes = {
  message: PropTypes.string.isRequired
}

export default function Customer () {
  const [customerList, setCustomerList] = React.useState([])
  const [loadingMessage, setLoadingMessage] = React.useState('Loading...')
  const [errorMessage, setErrorMessage] = React.useState(null)

  const [formMode, setFormMode] = React.useState('new')

  const emptyCustomer = { fname: '', lname: '', streetAddress:'', city: '', state: '', phoneNumber: '', email: '' }
  const [currentCustomer, setCurrentCustomer] = React.useState(emptyCustomer)

  // Note:  The {} around API.fetchCustomers are important so that the block
  // passed to useEffect returns undefined (instead of the promise generated by fetch).
  React.useEffect(() => {
    API.fetchCustomers().then(data => {
      setCustomerList(data)
      setLoadingMessage(null)
    }).catch((message) => {
      setLoadingMessage('Unable to load customers because ' + message)
    })
  }, [])

  const updateCustomer = (field, value) => {
    const newCustomer = { ...currentCustomer }
    newCustomer[field] = value
    setCurrentCustomer(newCustomer)
  }

  const formSubmitted = () => {
    setErrorMessage(null)
    if (formMode === 'new') {
      API.postNewCustomer(currentCustomer).then(data => {
        console.log('Received data')
        console.log(data)
        if (data.custID) {
          currentCustomer.custID = data.custID
          setCustomerList([...customerList, currentCustomer])
        } else {
          console.log("New customer wasn't created.")
        }
      }).catch(message => setErrorMessage(`Failed to create new customer: ${message}`))
    } else {
      API.updateCustomer(currentCustomer).then(() => {
        const newCustomerList = [...customerList]
        const customerIndex = customerList.findIndex((customer) => customer.custID === currentCustomer.custID)

        newCustomerList[customerIndex] = currentCustomer
        setCustomerList(newCustomerList)
      }).catch(message => setErrorMessage(`Failed to update customer: ${message}`))
    }
  }

  const editClicked = (customer) => {
    setErrorMessage(null)
    setFormMode('update')
    setCurrentCustomer(customer)
  }

  const cancelClicked = () => {
    setErrorMessage(null)
    setFormMode('new')
    setCurrentCustomer(emptyCustomer)
  }

  const deleteClicked = (id) => {
    API.deleteCustomer(id).then(() => {
      setCustomerList(customerList.filter((item) => item.custID !== id))
      cancelClicked()
    }).catch(message => setErrorMessage(`Failed to delete customer: ${message}`))
  }

  const errorBlock = errorMessage ? <ErrorMessage message={errorMessage} /> : null

  return (
    <div className="customer">
      <h1>Customer Information</h1>
      {errorBlock}
      <CustomerForm formMode={formMode} customer={currentCustomer} updateCustomer={updateCustomer}
        submitCallback={formSubmitted} cancelCallback={cancelClicked} />
      <div />
      {loadingMessage
        ? <p>{loadingMessage}</p>
        : <CustomerList customers={customerList} onEditClicked={editClicked} onDeleteClicked={deleteClicked} />
      }
    </div>
  )
}
