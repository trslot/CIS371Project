import React from 'react'
import WorkOrderForm from './WorkOrderForm'
import WorkOrderList from './WorkOrderList'
import API from '../WorkOrderAPI'
import PropTypes from 'prop-types'

function ErrorMessage({ message }) {
  return <div className='errorMessage'>{message}</div>
}

ErrorMessage.propTypes = {
  message: PropTypes.string.isRequired
}

export default function WorkOrder() {
  const [workOrderList, setWorkOrderList] = React.useState([])
  const [loadingMessage, setLoadingMessage] = React.useState('Loading...')
  const [errorMessage, setErrorMessage] = React.useState(null)

  const [formMode, setFormMode] = React.useState('new')

  const emptyWorkOrder = { workOrderNumber: '', custID: '', date: '', partID: '' }
  const [currentWorkOrder, setCurrentWorkOrder] = React.useState(emptyWorkOrder)

  // Note:  The {} around API.fetchWorkOrders are important so that the block
  // passed to useEffect returns undefined (instead of the promise generated by fetch).
  React.useEffect(() => {
    API.fetchWorkOrders().then(data => {
      setWorkOrderList(data)
      setLoadingMessage(null)
    }).catch((message) => {
      setLoadingMessage('Unable to load workOrders because ' + message)
    })
  }, [])

  const updateWorkOrder = (field, value) => {
    const newWorkOrder = { ...currentWorkOrder }
    newWorkOrder[field] = value
    setCurrentWorkOrder(newWorkOrder)
  }

  const formSubmitted = () => {
    setErrorMessage(null)
    if (formMode === 'new') {
      API.postNewWorkOrder(currentWorkOrder).then(data => {
        console.log('Received data')
        console.log(data)
        if (data.id) {
          currentWorkOrder.id = data.id
          setWorkOrderList([...workOrderList, currentWorkOrder])
        } else {
          console.log("New workOrder wasn't created.")
        }
      }).catch(message => setErrorMessage(`Failed to create new workOrder: ${message}`))
    } else {
      API.updateWorkOrder(currentWorkOrder).then(() => {
        const newWorkOrderList = [...workOrderList]
        const workOrderIndex = workOrderList.findIndex((workOrder) => workOrder.id === currentWorkOrder.id)

        newWorkOrderList[workOrderIndex] = currentWorkOrder
        setWorkOrderList(newWorkOrderList)
      }).catch(message => setErrorMessage(`Failed to update workOrder: ${message}`))
    }
  }

  const editClicked = (workOrder) => {
    setErrorMessage(null)
    setFormMode('update')
    setCurrentWorkOrder(workOrder)
  }

  const cancelClicked = () => {
    setErrorMessage(null)
    setFormMode('new')
    setCurrentWorkOrder(emptyWorkOrder)
  }

  const deleteClicked = (id) => {
    API.deleteWorkOrder(id).then(() => {
      setWorkOrderList(workOrderList.filter((item) => item.id !== id))
      cancelClicked()
    }).catch(message => setErrorMessage(`Failed to delete workOrder: ${message}`))
  }

  const errorBlock = errorMessage ? <ErrorMessage message={errorMessage} /> : null

  return (
    <div className="workOrder">
      <h1>Customer Orders</h1>
      {errorBlock}
      <WorkOrderForm formMode={formMode} workOrder={currentWorkOrder} updateWorkOrder={updateWorkOrder}
        submitCallback={formSubmitted} cancelCallback={cancelClicked} />
      <div />
      {loadingMessage
        ? <p>{loadingMessage}</p>
        : <WorkOrderList workOrders={workOrderList} onEditClicked={editClicked} onDeleteClicked={deleteClicked} />
      }
    </div>
  )
}
